
`
~ 

!
 int a=10;
 int c = 25;
 int b = -10;
 boolean d = false;
 sysout(~a);// -11   (minus of total positive value which starts from 0)
 sysout(~b);//9
 sysout(~c);//-26
 sysout(!d);//true
 
 example:
 ``
 package operators;

public class Test3 {

	public static void main(String[] args) {
		
		
		int a = 26;
		int b = -56;
		boolean c = true;
		boolean d = false;
		
		System.out.println(~a);//-27
		System.out.println(~b);//55
		System.out.println(!c);
		System.out.println(!d);
		
	}
}


unary operators: ++, --, ! and ~


 


Arithmetic operators:
```
these are used to perform 

  -addition
  -substraction
  -multiplication
  -division.
  
  
example:
`` 
package operators;

//this program is on Arithmetic operators
public class Test4 {

	public static void main(String[] args) {

		int a = 10;
		int b = 5;
		System.out.println(a + b);// 15

		System.out.println(a - b);// 5

		System.out.println(a * b);// 50
		System.out.println(a / b);// 2

		System.out.println(a % b);// 0

	}
}


example:
``
package operators;

public class Test5 {
	
	public static void main(String[] args) {
		
		System.out.println(10*10/5+3-1*4/2);
	}

}

note:
``
in above example, expression gets evaluated based on 
bodmas rule.

 braket
 operations
 division
 multiplication
 addition
 substraction
 
 


java left shift operator:
````
<<

it is used to shift all of the bits in a value to the left
side of a specified no.of times.

example:
`
//left shift operator example
package operators;

public class Test6 {

	public static void main(String[] args) {
		
		
		System.out.println(10<<2);//10*2^2=10*4=40
		System.out.println(10<<3);//10*2^3=10*8=80
		System.out.println(20<<2);//20*2^2=20*4=80
		System.out.println(15<<4);//15*2^4=15*16=240
		
	}
}


rightshift operator(>>):
`````
it is used to move left operatnds value to right
by the no.of bits specified by the right operand.


example:
`
package operators;

public class Test7 {

	 public static void main(String[] args) {
		
		 
		 System.out.println(10>>2);//10/2^2=10/4=2
		 System.out.println(20>>2);//20/2^2=20/4=5
		 System.out.println(20>>3);//2
		 
		 

	}
}


AND operator 
Logical and(&&)

bitwise and(&):
````
logical && operator doesn't check second condition 
if firstcondition is false.

it checks second conditin only if first one is true.

the bitwise & operator always checks both conditions whether
first condition is true or false.


example:
```
package operators;

public class Test8 {

	public static void main(String[] args) {
		
		
		int a=10;
		int b=5;
		int c=20;
		System.out.println(a<b&&a<c);//false&&true =false
		System.out.println(a<b&a<c);//false&true=false
	}
}


logical or (||) and bitwise or (|):
`````
the logical || operator doesn't check second
condition if first condition is true.

It checks second condition if first one is false.

the bitwise | operator always checks both conditions
whether first condition is true or false.

example:
```
package operators;

public class Test9 {

	
	public static void main(String[] args) {
		
		
		int a = 10;
		int b= 5;
		int c=20;
		System.out.println(a>b||a>c);//false||false ==true
		System.out.println(a>b|a<c);//true|true =true
		
	}
}



ternary operator:
````
it is used as one liner replacement for if-then-else
statement
  
example:
`
package operators;

public class Test10 {
	
	public static void main(String[] args) {
		
		
		int a =2;
		int b = 5;
		int min = (a>b)?a:b;
		System.out.println(min);
	}

}


assignment operator:
`````
it is one of the most common operator.

it is used to assign the value on its right to the operand
on its left.

int a = 10;

example:
``````
package operators;

public class Test11 {
	
	public static void main(String[] args) {
		
		int a = 10;
		int b= 20;
		
		a+=4;//a=a+4
		
		b-=4;//b=b-4;
		
		a*=2;//a=a*2
		
		
		System.out.println(a);//14
		System.out.println(b);//16
		System.out.println(a);//28
		
		a/=2;//a=a/2
		System.out.println(a);//14
		
	}

}